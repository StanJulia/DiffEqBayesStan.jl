
// Code generated by stanc 04918d7c
#include <stan/model/model_header.hpp>
namespace pes4_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 37> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 23, column 2 to column 32)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 24, column 2 to column 36)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 24, column 36 to column 70)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 24, column 70 to column 104)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 24, column 104 to column 138)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 27, column 18 to column 19)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 27, column 2 to column 21)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 28, column 2 to column 31)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 29, column 35 to column 38)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 29, column 31 to column 34)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 29, column 2 to column 40)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 30, column 35 to column 38)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 30, column 31 to column 34)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 30, column 2 to column 40)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 31, column 35 to column 38)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 31, column 31 to column 34)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 31, column 2 to column 40)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 32, column 35 to column 38)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 32, column 31 to column 34)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 32, column 2 to column 40)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 33, column 2 to line 34, column 37)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 36, column 4 to column 56)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 35, column 16 to line 37, column 5)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 35, column 2 to line 37, column 5)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 16, column 2 to column 15)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 17, column 2 to column 17)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 18, column 24 to column 25)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 18, column 2 to column 29)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 19, column 2 to column 10)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 20, column 10 to column 11)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 20, column 2 to column 13)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 6, column 4 to column 32)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 7, column 4 to line 8, column 69)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 9, column 4 to line 10, column 69)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 12, column 4 to column 29)",
 " (in '/Users/rob/.julia/dev/DiffEqBayesStan/test/tmp/pes4.stan', line 4, column 54 to line 13, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
T4__, stan::promote_args_t<T5__>>, -1, 1>
sho(const T0__& t, const T1__& internal_var___u_arg__,
    const T2__& internal_var___p_1, const T3__& internal_var___p_2,
    const T4__& internal_var___p_3, const T5__& internal_var___p_4,
    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T5__>>;
  int current_statement__ = 0; 
  const auto& internal_var___u = to_ref(internal_var___u_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> internal_var___du;
    internal_var___du = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(internal_var___du, DUMMY_VAR__);
    
    current_statement__ = 33;
    assign(internal_var___du,
      ((internal_var___p_1 *
         rvalue(internal_var___u, "internal_var___u", index_uni(1))) -
        ((internal_var___p_2 *
           rvalue(internal_var___u, "internal_var___u", index_uni(1))) *
          rvalue(internal_var___u, "internal_var___u", index_uni(2)))),
      "assigning variable internal_var___du", index_uni(1));
    current_statement__ = 34;
    assign(internal_var___du,
      ((rvalue(internal_var___u, "internal_var___u", index_uni(2)) *
         -internal_var___p_3) +
        ((internal_var___p_4 *
           rvalue(internal_var___u, "internal_var___u", index_uni(1))) *
          rvalue(internal_var___u, "internal_var___u", index_uni(2)))),
      "assigning variable internal_var___du", index_uni(2));
    current_statement__ = 35;
    return internal_var___du;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sho_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
T4__, stan::promote_args_t<T5__>>, -1, 1>
operator()(const T0__& t, const T1__& internal_var___u,
           const T2__& internal_var___p_1, const T3__& internal_var___p_2,
           const T4__& internal_var___p_3, const T5__& internal_var___p_4,
           std::ostream* pstream__)  const 
{
return sho(t, internal_var___u, internal_var___p_1, internal_var___p_2,
         internal_var___p_3, internal_var___p_4, pstream__);
}
};


struct sho_odefunctor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
T4__, stan::promote_args_t<T5__>>, -1, 1>
operator()(const T0__& t, const T1__& internal_var___u,
           std::ostream* pstream__, const T2__& internal_var___p_1,
           const T3__& internal_var___p_2, const T4__& internal_var___p_3,
           const T5__& internal_var___p_4)  const 
{
return sho(t, internal_var___u, internal_var___p_1, internal_var___p_2,
         internal_var___p_3, internal_var___p_4, pstream__);
}
};

class pes4_model final : public model_base_crtp<pes4_model> {

 private:
  Eigen::Matrix<double, -1, 1> u0__;
  int T;
  std::vector<std::vector<double>> internal_var___u;
  double t0;
  std::vector<double> ts; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> u0{nullptr, 0};
 
 public:
  ~pes4_model() { }
  
  inline std::string model_name() const final { return "pes4_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 04918d7c", "stancflags = --warn-pedantic"};
  }
  
  
  pes4_model(stan::io::var_context& context__,
             unsigned int random_seed__ = 0,
             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "pes4_model_namespace::pes4_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 25;
      context__.validate_dims("data initialization","u0","double",
           std::vector<size_t>{static_cast<size_t>(2)});
      u0__ = Eigen::Matrix<double, -1, 1>(2);
      new (&u0) Eigen::Map<Eigen::Matrix<double, -1, 1>>(u0__.data(), 2);
      
      {
        std::vector<local_scalar_t__> u0_flat__;
        current_statement__ = 25;
        u0_flat__ = context__.vals_r("u0");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 25;
          assign(u0, u0_flat__[(pos__ - 1)],
            "assigning variable u0", index_uni(sym1__));
          current_statement__ = 25;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 26;
      context__.validate_dims("data initialization","T","int",
           std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      
      current_statement__ = 26;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 26;
      check_greater_or_equal(function__, "T", T, 1);
      current_statement__ = 27;
      validate_non_negative_index("internal_var___u", "T", T);
      current_statement__ = 28;
      context__.validate_dims("data initialization","internal_var___u",
          "double",
           std::vector<size_t>{static_cast<size_t>(T),
            static_cast<size_t>(2)});
      internal_var___u = std::vector<std::vector<double>>(T, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> internal_var___u_flat__;
        current_statement__ = 28;
        internal_var___u_flat__ = context__.vals_r("internal_var___u");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 28;
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 28;
            assign(internal_var___u, internal_var___u_flat__[(pos__ - 1)],
              "assigning variable internal_var___u", index_uni(sym2__),
                                                       index_uni(sym1__));
            current_statement__ = 28;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 29;
      context__.validate_dims("data initialization","t0","double",
           std::vector<size_t>{});
      t0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 29;
      t0 = context__.vals_r("t0")[(1 - 1)];
      current_statement__ = 30;
      validate_non_negative_index("ts", "T", T);
      current_statement__ = 31;
      context__.validate_dims("data initialization","ts","double",
           std::vector<size_t>{static_cast<size_t>(T)});
      ts = std::vector<double>(T, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 31;
      ts = context__.vals_r("ts");
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 2 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "pes4_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, 1, -1> sigma1;
      sigma1 = Eigen::Matrix<local_scalar_t__, 1, -1>(2);
      stan::math::fill(sigma1, DUMMY_VAR__);
      
      current_statement__ = 1;
      sigma1 = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, 1, -1>, jacobian__>(
                 0, lp__, 2);
      local_scalar_t__ theta_1;
      theta_1 = DUMMY_VAR__;
      
      current_statement__ = 2;
      theta_1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0.5, 2.0, lp__);
      local_scalar_t__ theta_2;
      theta_2 = DUMMY_VAR__;
      
      current_statement__ = 3;
      theta_2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0.5, 1.5, lp__);
      local_scalar_t__ theta_3;
      theta_3 = DUMMY_VAR__;
      
      current_statement__ = 4;
      theta_3 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0.5, 4.0, lp__);
      local_scalar_t__ theta_4;
      theta_4 = DUMMY_VAR__;
      
      current_statement__ = 5;
      theta_4 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0.5, 2.0, lp__);
      {
        current_statement__ = 6;
        validate_non_negative_index("u_hat", "T", T);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> u_hat;
        u_hat = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(T, Eigen::Matrix<local_scalar_t__, -1, 1>(2));
        stan::math::fill(u_hat, DUMMY_VAR__);
        
        current_statement__ = 8;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sigma1, 4.0, 1.0));
        current_statement__ = 10;
        if (logical_lt(theta_1, 0.5)) {
          current_statement__ = 10;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 9;
          if (logical_gt(theta_1, 2.0)) {
            current_statement__ = 9;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 9;
            lp_accum__.add(
              -log_diff_exp(normal_cdf_log(2.0, 1.1, 0.5),
                 normal_cdf_log(0.5, 1.1, 0.5)));
          }
        }
        current_statement__ = 11;
        lp_accum__.add(normal_lpdf<propto__>(theta_1, 1.1, 0.5));
        current_statement__ = 13;
        if (logical_lt(theta_2, 0.5)) {
          current_statement__ = 13;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 12;
          if (logical_gt(theta_2, 1.5)) {
            current_statement__ = 12;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 12;
            lp_accum__.add(
              -log_diff_exp(normal_cdf_log(1.5, 1.5, 0.5),
                 normal_cdf_log(0.5, 1.5, 0.5)));
          }
        }
        current_statement__ = 14;
        lp_accum__.add(normal_lpdf<propto__>(theta_2, 1.5, 0.5));
        current_statement__ = 16;
        if (logical_lt(theta_3, 0.5)) {
          current_statement__ = 16;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 15;
          if (logical_gt(theta_3, 4.0)) {
            current_statement__ = 15;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 15;
            lp_accum__.add(
              -log_diff_exp(normal_cdf_log(4.0, 2.0, 0.5),
                 normal_cdf_log(0.5, 2.0, 0.5)));
          }
        }
        current_statement__ = 17;
        lp_accum__.add(normal_lpdf<propto__>(theta_3, 2.0, 0.5));
        current_statement__ = 19;
        if (logical_lt(theta_4, 0.5)) {
          current_statement__ = 19;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 18;
          if (logical_gt(theta_4, 2.0)) {
            current_statement__ = 18;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 18;
            lp_accum__.add(
              -log_diff_exp(normal_cdf_log(2.0, 1.5, 0.5),
                 normal_cdf_log(0.5, 1.5, 0.5)));
          }
        }
        current_statement__ = 20;
        lp_accum__.add(normal_lpdf<propto__>(theta_4, 1.5, 0.5));
        current_statement__ = 21;
        assign(u_hat,
          ode_rk45_tol(sho_odefunctor__(), u0, t0, ts, 0.001, 1.0e-6, 100000,
            pstream__, theta_1, theta_2, theta_3, theta_4),
          "assigning variable u_hat");
        current_statement__ = 24;
        for (int t = 1; t <= T; ++t) {
          current_statement__ = 22;
          lp_accum__.add(
            normal_lpdf<propto__>(
              rvalue(internal_var___u, "internal_var___u",
                index_uni(t), index_omni()),
              rvalue(u_hat, "u_hat", index_uni(t), index_min_max(1, 2)),
              sigma1));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "pes4_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, 1, -1> sigma1;
      sigma1 = Eigen::Matrix<double, 1, -1>(2);
      stan::math::fill(sigma1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      sigma1 = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, 1, -1>, jacobian__>(
                 0, lp__, 2);
      double theta_1;
      theta_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      theta_1 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0.5, 2.0, lp__);
      double theta_2;
      theta_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      theta_2 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0.5, 1.5, lp__);
      double theta_3;
      theta_3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      theta_3 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0.5, 4.0, lp__);
      double theta_4;
      theta_4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      theta_4 = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(
                  0.5, 2.0, lp__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma1[(sym1__ - 1)]);
      }
      vars__.emplace_back(theta_1);
      vars__.emplace_back(theta_2);
      vars__.emplace_back(theta_3);
      vars__.emplace_back(theta_4);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, 1, -1> sigma1;
      sigma1 = Eigen::Matrix<double, 1, -1>(2);
      stan::math::fill(sigma1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma1_flat__;
        current_statement__ = 1;
        sigma1_flat__ = context__.vals_r("sigma1");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 1;
          assign(sigma1, sigma1_flat__[(pos__ - 1)],
            "assigning variable sigma1", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, 1, -1> sigma1_free__;
      sigma1_free__ = Eigen::Matrix<double, 1, -1>(2);
      stan::math::fill(sigma1_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 1;
        assign(sigma1_free__, stan::math::lb_free(sigma1[(sym1__ - 1)], 0),
          "assigning variable sigma1_free__", index_uni(sym1__));
      }
      double theta_1;
      theta_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      theta_1 = context__.vals_r("theta_1")[(1 - 1)];
      double theta_1_free__;
      theta_1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      theta_1_free__ = stan::math::lub_free(theta_1, 0.5, 2.0);
      double theta_2;
      theta_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      theta_2 = context__.vals_r("theta_2")[(1 - 1)];
      double theta_2_free__;
      theta_2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      theta_2_free__ = stan::math::lub_free(theta_2, 0.5, 1.5);
      double theta_3;
      theta_3 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      theta_3 = context__.vals_r("theta_3")[(1 - 1)];
      double theta_3_free__;
      theta_3_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      theta_3_free__ = stan::math::lub_free(theta_3, 0.5, 4.0);
      double theta_4;
      theta_4 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      theta_4 = context__.vals_r("theta_4")[(1 - 1)];
      double theta_4_free__;
      theta_4_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      theta_4_free__ = stan::math::lub_free(theta_4, 0.5, 2.0);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma1_free__[(sym1__ - 1)]);
      }
      vars__.emplace_back(theta_1_free__);
      vars__.emplace_back(theta_2_free__);
      vars__.emplace_back(theta_3_free__);
      vars__.emplace_back(theta_4_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"sigma1", "theta_1", "theta_2",
      "theta_3", "theta_4"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(2)
                                                                   },
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma1" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "theta_1");
    param_names__.emplace_back(std::string() + "theta_2");
    param_names__.emplace_back(std::string() + "theta_3");
    param_names__.emplace_back(std::string() + "theta_4");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma1" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "theta_1");
    param_names__.emplace_back(std::string() + "theta_2");
    param_names__.emplace_back(std::string() + "theta_3");
    param_names__.emplace_back(std::string() + "theta_4");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"theta_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"theta_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_3\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_4\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = pes4_model_namespace::pes4_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return pes4_model_namespace::profiles__;
}

#endif


